(defparameter *counts* (make-hash-table))

(defun add-to-counts (val count)
  (setf (gethash val *counts*) count))

(add-to-counts 1 "one")
(add-to-counts 2 "two")
(add-to-counts 3 "three")
(add-to-counts 4 "four")
(add-to-counts 5 "five")
(add-to-counts 6 "six")
(add-to-counts 7 "seven")
(add-to-counts 8 "eight")
(add-to-counts 9 "nine")
(add-to-counts 10 "ten")
(add-to-counts 11 "eleven")
(add-to-counts 12 "twelve")
(add-to-counts 13 "thirteen")
(add-to-counts 14 "fourteen")
(add-to-counts 15 "fifteen")
(add-to-counts 16 "sixteen")
(add-to-counts 17 "seventeen")
(add-to-counts 18 "eighteen")
(add-to-counts 19 "nineteen")
(add-to-counts 20 "twenty")
(add-to-counts 30 "thirty")
(add-to-counts 40 "forty")
(add-to-counts 50 "fifty")
(add-to-counts 60 "sixty")
(add-to-counts 70 "seventy")
(add-to-counts 80 "eighty")
(add-to-counts 90 "ninety")
(add-to-counts 100 "onehundred")

(defun get-number-name (x)
  (let ((name (gethash x *counts*)))
    (format t "Name: ~a~%" name)
    (cond
      (name (length name))
      ((> x 100)
       (if (zerop (mod x 100))
	   (+ (get-number-name (floor (/ x 100))) 7)
	   (+ 3 (get-number-name (floor (/ x 100))) 7 (get-number-name (mod x 100)))) 	;3 for and
	   )
      ((> x 10)
       (+ (get-number-name (* 10 (floor (/ x 10)))) (get-number-name (mod x 10))))	;3 for and
      (t 0))))

(iter (for i from 1 to 999)
  (sum (get-number-name i) into sum1)
  (finally (return (+ 11 sum1))))
